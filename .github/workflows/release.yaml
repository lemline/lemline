name: Build & Release Lemline

# Triggers: version tags, nightly schedule, or manual dispatch
on:
  push:
    tags: [ 'v*.*.*' ]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: { }

env:
  # If this run is a tag build, use the tag name; otherwise 'nightly'
  VERSION_NAME: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'nightly' }}

permissions:
  contents: write

jobs:

  #################################
  # 1) Check Changes
  #################################
  check-changes:
    # Only run on schedule; version/tag pushes always proceed.
    runs-on: ubuntu-22.04
    outputs:
      changed: ${{ steps.diff.outputs.changed }}
    steps:
      - name: Check out source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes under lemline-runner
        id: diff
        shell: bash
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          tag_commit=$(git rev-list -n1 "$latest_tag")
          if git diff --quiet "$tag_commit"..HEAD; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true"  >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: check-changes
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-22.04
            platform: linux-x86_64
          - runner: windows-2022
            platform: windows-x86_64
          - runner: macos-14
            platform: macos-arm64

    steps:
      #################################
      # 2) Checkout
      #################################

      - name: Check out source
        uses: actions/checkout@v4

      #################################
      # 3) Graalvm setup
      #################################

      - name: Set up Graalvm Native Image
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: 21
          github-token: ${{ secrets.GITHUB_TOKEN }}

      #################################
      # 4) 🪟 Windows-specific configuration
      #################################

      - name: Setup MSBuild
        if: ${{ runner.os == 'Windows' }}
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Setup MSVC (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1.12.1
        with:
          arch: x64

      - name: Set up Java 17 for Gradle toolchain
        if: ${{ runner.os == 'Windows' }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      #################################
      # 5) Native build step
      #################################

      # **☕ Build Uber-JAR**
      - name: Build uber-jar (Linux)
        if: ${{ matrix.platform == 'linux-x86_64' }}
        run: |
          ./gradlew -p lemline-runner quarkusBuild \
          -Dquarkus.package.jar.type=uber-jar

      # **🐧 Linux**
      - name: Build native image (Unix)
        if: ${{ matrix.platform == 'linux-x86_64' }}
        run: |
          ./gradlew -p lemline-runner quarkusBuild \
            -Dquarkus.native.enabled=true \
            -Dquarkus.package.jar.enabled=false \
            -Dquarkus.native.native-image-xmx=6g

      # **🍎 MacOS**
      - name: Build native image (MacOs)
        if: runner.os == 'macOS'
        run: |
          ./gradlew -p lemline-runner quarkusBuild \
            -Dquarkus.native.enabled=true \
            -Dquarkus.package.jar.enabled=false \
            -Dquarkus.native.native-image-xmx=10g   # Increased memory for macos

      # **🪟 Windows**
      - name: Build native image (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          gradlew.bat -p lemline-runner quarkusBuild ^
            -Dquarkus.native.enabled=true ^
            -Dquarkus.package.jar.enabled=false ^
            -Dquarkus.native.native-image-xmx=6g

      #################################
      # 6) Packaging
      #################################

      # **🐧 Linux & 🍎 MacOS**
      - name: Package distribution (macOS/Linux)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          mkdir -p dist/bin
          cp lemline-runner/build/*-runner dist/bin/lemline
          chmod +x dist/bin/lemline
          cp LICENSE.md README.md dist/
          tar -C dist -czf "lemline-${VERSION_NAME}-${{ matrix.platform }}.tar.gz" .

      # **🪟 Windows**
      - name: Package distribution (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist\bin
          Copy-Item lemline-runner/build\*-runner.exe dist\bin\lemline.exe
          Copy-Item LICENSE.md, README.md dist\
          Compress-Archive -Path dist\* -DestinationPath "lemline-${env:VERSION_NAME}-${{ matrix.platform }}.zip"

      # **☕ Uber-JAR**
      - name: Package distribution (Uber JAR)
        if: ${{ matrix.platform == 'linux-x86_64' }}
        shell: bash
        run: |
          JAR=$(ls lemline-runner/build/*-runner.jar)
          # ① plain jar
          cp "$JAR" "lemline-${VERSION_NAME}.jar"
          # ② jar + docs zipped
          mkdir -p dist_jar
          cp "$JAR" dist_jar/lemline.jar
          cp LICENSE.md README.md dist_jar/
          (cd dist_jar && zip -r "../lemline-${VERSION_NAME}-jar.zip" .)

      #################################
      # 7) Checksums
      #################################

      # **🐧 Linux & 🍎 MacOS**
      - name: Compute checksum (macOS/Linux)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          artifact=$(ls lemline-${VERSION_NAME}-${{ matrix.platform }}.*)
          shasum -a 256 "$artifact" > "$artifact.sha256"

      # **🪟 Windows**
      - name: Compute checksum (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $artifact = Get-ChildItem "lemline-${env:VERSION_NAME}-${{ matrix.platform }}.*"
          $hash = Get-FileHash $artifact -Algorithm SHA256
          $hash.Hash | Out-File -Encoding ASCII "$($artifact.Name).sha256"

      # **☕ Uber-JAR**
      - name: Compute checksum (Uber‑JAR)
        if: ${{ matrix.platform == 'linux-x86_64' }}
        shell: bash
        run: |
          shasum -a 256 "lemline-${VERSION_NAME}.jar"      > "lemline-${VERSION_NAME}.jar.sha256"
          shasum -a 256 "lemline-${VERSION_NAME}-jar.zip"  > "lemline-${VERSION_NAME}-jar.zip.sha256"

      #################################
      # 8) Release (nightly or versioned)
      #################################
      - name: 📦 Publish to GitHub Releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lemline-${{ env.VERSION_NAME }}*.*   # grabs tar.gz, zip, jar, sha256
          file_glob: true
          tag: ${{ github.event_name == 'push' && github.ref_name || 'nightly' }}
          release_name: ${{ github.event_name == 'push' && format('Lemline {0}', github.ref_name) || 'Nightly Build' }}
          prerelease: ${{ github.event_name != 'push' }}
          overwrite: true
          make_latest: ${{ github.event_name == 'push' }}
